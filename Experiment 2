import java.util.ArrayList;
import java.util.List;

public class SimplePatternMatching {

    // Naive Search method
    public static List<Integer> naiveSearch(String pattern, String text) {
        List<Integer> occurrences = new ArrayList<>();
        int m = pattern.length();
        int n = text.length();

        for (int i = 0; i <= n - m; i++) {
            int j = 0;
            while (j < m && text.charAt(i + j) == pattern.charAt(j)) {
                j++;
            }
            if (j == m) {
                occurrences.add(i);
            }
        }
        return occurrences;
    }

    // KMP Search method
    public static List<Integer> kmpSearch(String pattern, String text) {
        List<Integer> occurrences = new ArrayList<>();
        int m = pattern.length();
        int n = text.length();
        int[] lps = computeLPSArray(pattern);
        int i = 0, j = 0;

        while (i < n) {
            if (pattern.charAt(j) == text.charAt(i)) {
                i++;
                j++;
            }
            if (j == m) {
                occurrences.add(i - j);
                j = lps[j - 1];
            } else if (i < n && pattern.charAt(j) != text.charAt(i)) {
                if (j != 0) {
                    j = lps[j - 1];
                } else {
                    i++;
                }
            }
        }
        return occurrences;
    }

    // Compute the Longest Prefix Suffix (LPS) array for KMP
    public static int[] computeLPSArray(String pattern) {
        int m = pattern.length();
        int[] lps = new int[m];
        int len = 0;
        int i = 1;

        while (i < m) {
            if (pattern.charAt(i) == pattern.charAt(len)) {
                len++;
                lps[i] = len;
                i++;
            } else {
                if (len != 0) {
                    len = lps[len - 1];
                } else {
                    lps[i] = 0;
                    i++;
                }
            }
        }
        return lps;
    }

    public static void main(String[] args) {
        String text = "aaabcabcabc";
        String pattern = "abc";

        System.out.println("Naive Search Results:");
        List<Integer> naiveResults = naiveSearch(pattern, text);
        System.out.println(naiveResults);

        System.out.println("KMP Search Results:");
        List<Integer> kmpResults = kmpSearch(pattern, text);
        System.out.println(kmpResults);
    }
}
